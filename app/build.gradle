// app config
apply plugin: 'com.android.application'

def camera_folder = 'Camera2'

def srcFolder = [
        camera_folder + '/src',
        camera_folder + '/src_pd',
        camera_folder + '/src_pd_gcam',
        camera_folder + '/config/src',
]

def resFolder = [
        camera_folder + '/res',
        camera_folder + '/res_p',
]

def MANIFEST_REPLACE = false
def manifestFile = camera_folder + '/AndroidManifest.xml'
def manifestFileReplace = camera_folder + '/src_plus/AndroidManifest.xml'

android {
    def compileSdkVersionInt = 27
    compileSdkVersion compileSdkVersionInt
    defaultConfig {
        applicationId "com.baby518.camera2"
        minSdkVersion 23
        targetSdkVersion compileSdkVersionInt
        versionCode getCurrentDate() as int
        versionName "1.0.3." + getCurrentDate()
    }

    flavorDimensions "dimen"
    productFlavors {
        AOSP_ORIG_ {
            buildConfigField("String", "API_LEVEL", "\"auto\"")
            buildConfigField("boolean", "USE_CAPTURE_MODULE", "true")
            buildConfigField("boolean", "USE_FILMSTRIP", "true")
            buildConfigField("boolean", "SUPPORT_NAVIGATION_BAR", "false")
            buildConfigField("boolean", "FORCE_PORTRAIT_SCREEN", "false")
//            MANIFEST_REPLACE = false
        }
        PLUS_ {
            MANIFEST_REPLACE = true
            def FORCE_PORTRAIT_SCREEN = true
            buildConfigField("String", "API_LEVEL", "\"api2\"")
            buildConfigField("boolean", "USE_CAPTURE_MODULE", "false")
            buildConfigField("boolean", "USE_FILMSTRIP", "false")
            buildConfigField("boolean", "SUPPORT_NAVIGATION_BAR", "true")
            buildConfigField("boolean", "FORCE_PORTRAIT_SCREEN", "${FORCE_PORTRAIT_SCREEN}")
            manifestPlaceholders = [SCREEN_ORIENTATION: FORCE_PORTRAIT_SCREEN ? 'portrait' : 'unspecified']
        }
    }

    sourceSets {
        main {
            if (MANIFEST_REPLACE) {
                manifest.srcFile file(manifestFileReplace)
            } else {
                manifest.srcFile file(manifestFile)
            }
            def assetsFolder = [camera_folder + '/assets']
            def libsFolder = [camera_folder + '/libs']

            java.srcDirs = srcFolder
            resources.srcDirs = srcFolder
            aidl.srcDirs = srcFolder
            renderscript.srcDirs = srcFolder
            res.srcDirs = resFolder
            assets.srcDirs = assetsFolder
//            jni.srcDirs = ['jni']
            jniLibs.srcDirs = libsFolder
        }

        PLUS_ {
            java.srcDirs = [camera_folder + '/src_plus']
            // res_plus contain new resources, res_overlay contain overlay resources.
            res.srcDirs = [camera_folder + '/res_plus'] + [camera_folder + '/res_overlay']
        }

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    if (compileSdkVersionInt >= 23) {
        useLibrary 'org.apache.http.legacy'
    }
}

dependencies {
    compileOnly files(getLayoutLibPath(android))
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':framework_ex')
    implementation 'com.android.support:support-v4:27.0.2'
    implementation 'com.google.code.findbugs:jsr305:3.0.1'
    implementation 'com.google.guava:guava:19.0'
    implementation 'com.github.bumptech.glide:glide:3.8.0'
    implementation 'com.adobe.xmp:xmpcore:5.1.2'
}

def static getCurrentDate() {
    return new Date().format('yyyyMMddHH')
}

// must called after "android" definition
def static getLayoutLibPath(Object android) {
    def rootDir = "${android.getSdkDirectory().getAbsolutePath()}" + "/platforms/" + android.compileSdkVersion + "/data/layoutlib.jar"
    Console.println(rootDir)
    return rootDir
}
